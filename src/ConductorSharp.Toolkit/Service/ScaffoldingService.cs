using ConductorSharp.Client.Generated;
using ConductorSharp.Client.Service;
using ConductorSharp.Engine.Util;
using ConductorSharp.Toolkit.Filters;
using ConductorSharp.Toolkit.Util;
using Microsoft.Extensions.Options;
using Task = System.Threading.Tasks.Task;

namespace ConductorSharp.Toolkit.Service
{
    public class ScaffoldingService : IScaffoldingService
    {
        private readonly IMetadataService _metadataService;
        private readonly ScaffoldingConfig _config;

        // Prefix prepended if member name is invalid
        private const string MemberNamePrefix = "A";

        public ScaffoldingService(IMetadataService metadataService, IOptions<ScaffoldingConfig> options)
        {
            _metadataService = metadataService;
            _config = options.Value;
        }

        public async Task Scaffold()
        {
            var taskFilters = CreateTaskFilters();
            var workflowFilters = CreateWorkflowFilters();

            if (!_config.IgnoreWorkflows)
            {
                var workflowDefinitions = await _metadataService.ListWorkflowsAsync();
                workflowDefinitions = Filter(workflowDefinitions, workflowFilters).ToArray();
                var workflowDirectory = Path.Combine(_config.Destination, "Workflows");
                Directory.CreateDirectory(workflowDirectory);
                foreach (var workflowDefinition in workflowDefinitions)
                {
                    Console.WriteLine($"Scaffolding workflow {workflowDefinition.Name}");
                    if (_config.DryRun)
                        continue;

                    (var contents, var modelClassName) = CreateWorkflowClass(workflowDefinition);

                    if (contents != null && !_config.DryRun)
                    {
                        var filePath = Path.Combine(workflowDirectory, $"{modelClassName}.scaff.cs");
                        File.WriteAllText(filePath, contents);
                    }
                }
            }

            if (!_config.IgnoreTasks)
            {
                var taskDefinitions = await _metadataService.ListTasksAsync();
                taskDefinitions = Filter(taskDefinitions, taskFilters).ToArray();
                var tasksDirectory = Path.Combine(_config.Destination, "Tasks");
                Directory.CreateDirectory(tasksDirectory);
                foreach (var taskDefinition in taskDefinitions)
                {
                    Console.WriteLine($"Scaffolding task {taskDefinition.Name}");
                    if (_config.DryRun)
                        continue;

                    (var contents, var modelClassName) = CreateTaskClass(taskDefinition);

                    if (contents != null)
                    {
                        var filePath = Path.Combine(tasksDirectory, $"{modelClassName}.scaff.cs");
                        File.WriteAllText(filePath, contents);
                    }
                }
            }
        }

        public (string contents, string modelClassName) CreateWorkflowClass(WorkflowDef workflowDefinition)
        {
            string name = SnakeCaseUtil.ToPascalCase($"{workflowDefinition.Name}_V{workflowDefinition.Version}").Trim();
            string note = null;
            if (LangUtils.MakeValidMemberName(name, MemberNamePrefix, out name))
            {
                note = "The autogenerated name has been changed because it is invalid C# member name";
            }

            var modelGenerator = new TaskModelGenerator(_config.BaseNamespace + ".Workflows", name, TaskModelGenerator.ModelType.Workflow)
            {
                OriginalName = workflowDefinition.Name,
                Version =
                    workflowDefinition.Version ?? throw new InvalidOperationException($"Workflow {workflowDefinition.Name} version cannot be null")
            };

            foreach (var inputParam in workflowDefinition.InputParameters)
            {
                var inputPropData = new TaskModelGenerator.PropertyData();
                inputPropData.XmlComments["originalName"] = inputParam;
                DefinePropertyParams(inputPropData, "object", inputParam);
                modelGenerator.AddInputProperty(inputPropData);
            }

            modelGenerator.AddXmlComment("summary", workflowDefinition.Description?.Replace('\n', ','));
            modelGenerator.AddXmlComment("originalName", workflowDefinition.Name);
            modelGenerator.AddXmlComment("ownerApp", workflowDefinition.OwnerApp);
            modelGenerator.AddXmlComment("ownerEmail", workflowDefinition.OwnerEmail);
            modelGenerator.AddXmlComment("note", note);

            return (modelGenerator.Build(), name);
        }

        private static void DefinePropertyParams(TaskModelGenerator.PropertyData propData, string type, string originalName)
        {
            LangUtils.MakeValidMemberName(SnakeCaseUtil.ToPascalCase(originalName), MemberNamePrefix, out var propertyName);
            propData.OriginalName = originalName;
            propData.Name = propertyName;
            propData.Type = type;
        }

        public (string contents, string modelClassName) CreateTaskClass(TaskDef taskDefinition)
        {
            string name = SnakeCaseUtil.ToPascalCase(taskDefinition.Name).Trim();
            string note = null;
            if (LangUtils.MakeValidMemberName(name, MemberNamePrefix, out name))
            {
                note = "The autogenerated name has been prepended because it starts with a digit character.";
            }

            var modelGenerator = new TaskModelGenerator(_config.BaseNamespace + ".Tasks", name, TaskModelGenerator.ModelType.Task)
            {
                OriginalName = taskDefinition.Name
            };

            foreach (var property in taskDefinition.InputKeys)
            {
                var inputPropData = new TaskModelGenerator.PropertyData();
                DefinePropertyParams(inputPropData, "object", property);
                inputPropData.XmlComments["originalName"] = property;
                modelGenerator.AddInputProperty(inputPropData);
            }

            foreach (var property in taskDefinition.OutputKeys)
            {
                var inputPropData = new TaskModelGenerator.PropertyData();
                DefinePropertyParams(inputPropData, "object", property);
                inputPropData.XmlComments["originalName"] = property;
                modelGenerator.AddOutputProperty(inputPropData);
            }

            modelGenerator.AddXmlComment("originalName", taskDefinition.Name);
            modelGenerator.AddXmlComment("ownerEmail", taskDefinition.OwnerEmail);
            modelGenerator.AddXmlComment("node", note);
            modelGenerator.AddXmlComment("summary", taskDefinition.Description?.Replace('\n', ','));
            return (modelGenerator.Build(), name);
        }

        private ITaskFilter[] CreateTaskFilters()
        {
            var taskFilters = new List<ITaskFilter>();
            if (_config.NameFilters.Length != 0)
                taskFilters.Add(new NameTaskFilter(_config.NameFilters));
            if (_config.OwnerAppFilters.Length != 0)
                taskFilters.Add(new OwnerAppTaskFilter(_config.OwnerAppFilters));
            if (_config.OwnerEmailFilters.Length != 0)
                taskFilters.Add(new OwnerEmailTaskFilter(_config.OwnerEmailFilters));

            return taskFilters.ToArray();
        }

        private IWorkflowFilter[] CreateWorkflowFilters()
        {
            var workflowFilters = new List<IWorkflowFilter>();
            if (_config.NameFilters.Length != 0)
                workflowFilters.Add(new NameWorkflowFilter(_config.NameFilters));
            if (_config.OwnerAppFilters.Length != 0)
                workflowFilters.Add(new OwnerAppWorkflowFilter(_config.OwnerAppFilters));
            if (_config.OwnerEmailFilters.Length != 0)
                workflowFilters.Add(new OwnerEmailWorkflowFilter(_config.OwnerEmailFilters));

            return workflowFilters.ToArray();
        }

        // If filter list is empty then all workflows/tasks are returned
        private static IEnumerable<WorkflowDef> Filter(IEnumerable<WorkflowDef> workflows, IWorkflowFilter[] filters) =>
            workflows.Where(wf => filters.All(filter => filter.Test(wf)));

        private static IEnumerable<TaskDef> Filter(IEnumerable<TaskDef> tasks, ITaskFilter[] filters) =>
            tasks.Where(task => filters.All(filter => filter.Test(task)));
    }
}
