{
  "ownerApp": null,
  "createTime": 0,
  "updateTime": 0,
  "createdBy": null,
  "updatedBy": null,
  "name": "c_sharp_lambda",
  "description": "{\"description\":null,\"labels\":null}",
  "version": 1,
  "tasks": [
    {
      "queryExpression": null,
      "name": "LAMBDA_identity",
      "taskReferenceName": "identity",
      "description": "{\"description\":null}",
      "inputParameters": {
        "input": "${workflow.input.input}",
        "scriptExpression": "return $"
      },
      "type": "LAMBDA",
      "dynamicTaskNameParam": null,
      "caseValueParam": null,
      "caseExpression": null,
      "expression": null,
      "evaluatorType": null,
      "scriptExpression": null,
      "decisionCases": null,
      "dynamicForkJoinTasksParam": null,
      "dynamicForkTasksParam": null,
      "dynamicForkTasksInputParamName": null,
      "defaultCase": null,
      "forkTasks": null,
      "startDelay": 0,
      "subWorkflowParam": null,
      "joinOn": null,
      "sink": null,
      "optional": false,
      "taskDefinition": null,
      "rateLimited": false,
      "defaultExclusiveJoinTask": null,
      "asyncComplete": false,
      "loopCondition": null,
      "loopOver": null
    },
    {
      "queryExpression": null,
      "name": "LAMBDA_to_lower_invariant",
      "taskReferenceName": "to_lower_invariant",
      "description": "{\"description\":null}",
      "inputParameters": {
        "input": "${workflow.input.input}",
        "scriptExpression": "return {output:$.input.toLowerCase()}"
      },
      "type": "LAMBDA",
      "dynamicTaskNameParam": null,
      "caseValueParam": null,
      "caseExpression": null,
      "expression": null,
      "evaluatorType": null,
      "scriptExpression": null,
      "decisionCases": null,
      "dynamicForkJoinTasksParam": null,
      "dynamicForkTasksParam": null,
      "dynamicForkTasksInputParamName": null,
      "defaultCase": null,
      "forkTasks": null,
      "startDelay": 0,
      "subWorkflowParam": null,
      "joinOn": null,
      "sink": null,
      "optional": false,
      "taskDefinition": null,
      "rateLimited": false,
      "defaultExclusiveJoinTask": null,
      "asyncComplete": false,
      "loopCondition": null,
      "loopOver": null
    },
    {
      "queryExpression": null,
      "name": "LAMBDA_to_upper_invariant",
      "taskReferenceName": "to_upper_invariant",
      "description": "{\"description\":null}",
      "inputParameters": {
        "input": "${workflow.input.input}",
        "scriptExpression": "return {output:$.input.toUpperCase()}"
      },
      "type": "LAMBDA",
      "dynamicTaskNameParam": null,
      "caseValueParam": null,
      "caseExpression": null,
      "expression": null,
      "evaluatorType": null,
      "scriptExpression": null,
      "decisionCases": null,
      "dynamicForkJoinTasksParam": null,
      "dynamicForkTasksParam": null,
      "dynamicForkTasksInputParamName": null,
      "defaultCase": null,
      "forkTasks": null,
      "startDelay": 0,
      "subWorkflowParam": null,
      "joinOn": null,
      "sink": null,
      "optional": false,
      "taskDefinition": null,
      "rateLimited": false,
      "defaultExclusiveJoinTask": null,
      "asyncComplete": false,
      "loopCondition": null,
      "loopOver": null
    },
    {
      "queryExpression": null,
      "name": "LAMBDA_trim_start",
      "taskReferenceName": "trim_start",
      "description": "{\"description\":null}",
      "inputParameters": {
        "input": "${workflow.input.input}",
        "scriptExpression": "return {output:((function (str, chars, mode) {\n\n    if (chars == null)\n        chars = ' ';\n\n    var trimStart = true;\n    var trimEnd = true;\n\n    if (mode)\n    {\n        trimStart = mode === \"start\";\n        trimEnd = mode === \"end\";\n    }\n\n    var map = {};\n\n    if (typeof chars == 'string')\n        chars = [chars];\n\n    for (var i = 0; i < chars.length; ++i) {\n        map[chars[i]] = true;\n    }\n\n    var front = 0;\n    var back = str.length - 1;\n\n    for (var i = 0; i <= Math.floor(str.length / 2); ++i) {\n        if (trimStart && map[str[front]])\n            ++front;\n        if (trimEnd && map[str[back]])\n            --back;\n    }\n\n    if (back < front)\n        return \"\";\n    else\n        return str.substring(front, back + 1);\n})($.input,\" \",\"start\")}"
      },
      "type": "LAMBDA",
      "dynamicTaskNameParam": null,
      "caseValueParam": null,
      "caseExpression": null,
      "expression": null,
      "evaluatorType": null,
      "scriptExpression": null,
      "decisionCases": null,
      "dynamicForkJoinTasksParam": null,
      "dynamicForkTasksParam": null,
      "dynamicForkTasksInputParamName": null,
      "defaultCase": null,
      "forkTasks": null,
      "startDelay": 0,
      "subWorkflowParam": null,
      "joinOn": null,
      "sink": null,
      "optional": false,
      "taskDefinition": null,
      "rateLimited": false,
      "defaultExclusiveJoinTask": null,
      "asyncComplete": false,
      "loopCondition": null,
      "loopOver": null
    },
    {
      "queryExpression": null,
      "name": "LAMBDA_trim_start_single_char",
      "taskReferenceName": "trim_start_single_char",
      "description": "{\"description\":null}",
      "inputParameters": {
        "input": "${workflow.input.input}",
        "scriptExpression": "return {output:((function (str, chars, mode) {\n\n    if (chars == null)\n        chars = ' ';\n\n    var trimStart = true;\n    var trimEnd = true;\n\n    if (mode)\n    {\n        trimStart = mode === \"start\";\n        trimEnd = mode === \"end\";\n    }\n\n    var map = {};\n\n    if (typeof chars == 'string')\n        chars = [chars];\n\n    for (var i = 0; i < chars.length; ++i) {\n        map[chars[i]] = true;\n    }\n\n    var front = 0;\n    var back = str.length - 1;\n\n    for (var i = 0; i <= Math.floor(str.length / 2); ++i) {\n        if (trimStart && map[str[front]])\n            ++front;\n        if (trimEnd && map[str[back]])\n            --back;\n    }\n\n    if (back < front)\n        return \"\";\n    else\n        return str.substring(front, back + 1);\n})($.input,\"/\",\"start\")}"
      },
      "type": "LAMBDA",
      "dynamicTaskNameParam": null,
      "caseValueParam": null,
      "caseExpression": null,
      "expression": null,
      "evaluatorType": null,
      "scriptExpression": null,
      "decisionCases": null,
      "dynamicForkJoinTasksParam": null,
      "dynamicForkTasksParam": null,
      "dynamicForkTasksInputParamName": null,
      "defaultCase": null,
      "forkTasks": null,
      "startDelay": 0,
      "subWorkflowParam": null,
      "joinOn": null,
      "sink": null,
      "optional": false,
      "taskDefinition": null,
      "rateLimited": false,
      "defaultExclusiveJoinTask": null,
      "asyncComplete": false,
      "loopCondition": null,
      "loopOver": null
    },
    {
      "queryExpression": null,
      "name": "LAMBDA_trim_start_multiple_chars",
      "taskReferenceName": "trim_start_multiple_chars",
      "description": "{\"description\":null}",
      "inputParameters": {
        "input": "${workflow.input.input}",
        "scriptExpression": "return {output:((function (str, chars, mode) {\n\n    if (chars == null)\n        chars = ' ';\n\n    var trimStart = true;\n    var trimEnd = true;\n\n    if (mode)\n    {\n        trimStart = mode === \"start\";\n        trimEnd = mode === \"end\";\n    }\n\n    var map = {};\n\n    if (typeof chars == 'string')\n        chars = [chars];\n\n    for (var i = 0; i < chars.length; ++i) {\n        map[chars[i]] = true;\n    }\n\n    var front = 0;\n    var back = str.length - 1;\n\n    for (var i = 0; i <= Math.floor(str.length / 2); ++i) {\n        if (trimStart && map[str[front]])\n            ++front;\n        if (trimEnd && map[str[back]])\n            --back;\n    }\n\n    if (back < front)\n        return \"\";\n    else\n        return str.substring(front, back + 1);\n})($.input,[\"/\",\".\"],\"start\")}"
      },
      "type": "LAMBDA",
      "dynamicTaskNameParam": null,
      "caseValueParam": null,
      "caseExpression": null,
      "expression": null,
      "evaluatorType": null,
      "scriptExpression": null,
      "decisionCases": null,
      "dynamicForkJoinTasksParam": null,
      "dynamicForkTasksParam": null,
      "dynamicForkTasksInputParamName": null,
      "defaultCase": null,
      "forkTasks": null,
      "startDelay": 0,
      "subWorkflowParam": null,
      "joinOn": null,
      "sink": null,
      "optional": false,
      "taskDefinition": null,
      "rateLimited": false,
      "defaultExclusiveJoinTask": null,
      "asyncComplete": false,
      "loopCondition": null,
      "loopOver": null
    },
    {
      "queryExpression": null,
      "name": "LAMBDA_trim_end",
      "taskReferenceName": "trim_end",
      "description": "{\"description\":null}",
      "inputParameters": {
        "input": "${workflow.input.input}",
        "scriptExpression": "return {output:((function (str, chars, mode) {\n\n    if (chars == null)\n        chars = ' ';\n\n    var trimStart = true;\n    var trimEnd = true;\n\n    if (mode)\n    {\n        trimStart = mode === \"start\";\n        trimEnd = mode === \"end\";\n    }\n\n    var map = {};\n\n    if (typeof chars == 'string')\n        chars = [chars];\n\n    for (var i = 0; i < chars.length; ++i) {\n        map[chars[i]] = true;\n    }\n\n    var front = 0;\n    var back = str.length - 1;\n\n    for (var i = 0; i <= Math.floor(str.length / 2); ++i) {\n        if (trimStart && map[str[front]])\n            ++front;\n        if (trimEnd && map[str[back]])\n            --back;\n    }\n\n    if (back < front)\n        return \"\";\n    else\n        return str.substring(front, back + 1);\n})($.input,\" \",\"end\")}"
      },
      "type": "LAMBDA",
      "dynamicTaskNameParam": null,
      "caseValueParam": null,
      "caseExpression": null,
      "expression": null,
      "evaluatorType": null,
      "scriptExpression": null,
      "decisionCases": null,
      "dynamicForkJoinTasksParam": null,
      "dynamicForkTasksParam": null,
      "dynamicForkTasksInputParamName": null,
      "defaultCase": null,
      "forkTasks": null,
      "startDelay": 0,
      "subWorkflowParam": null,
      "joinOn": null,
      "sink": null,
      "optional": false,
      "taskDefinition": null,
      "rateLimited": false,
      "defaultExclusiveJoinTask": null,
      "asyncComplete": false,
      "loopCondition": null,
      "loopOver": null
    },
    {
      "queryExpression": null,
      "name": "LAMBDA_trim_end_single_char",
      "taskReferenceName": "trim_end_single_char",
      "description": "{\"description\":null}",
      "inputParameters": {
        "input": "${workflow.input.input}",
        "scriptExpression": "return {output:((function (str, chars, mode) {\n\n    if (chars == null)\n        chars = ' ';\n\n    var trimStart = true;\n    var trimEnd = true;\n\n    if (mode)\n    {\n        trimStart = mode === \"start\";\n        trimEnd = mode === \"end\";\n    }\n\n    var map = {};\n\n    if (typeof chars == 'string')\n        chars = [chars];\n\n    for (var i = 0; i < chars.length; ++i) {\n        map[chars[i]] = true;\n    }\n\n    var front = 0;\n    var back = str.length - 1;\n\n    for (var i = 0; i <= Math.floor(str.length / 2); ++i) {\n        if (trimStart && map[str[front]])\n            ++front;\n        if (trimEnd && map[str[back]])\n            --back;\n    }\n\n    if (back < front)\n        return \"\";\n    else\n        return str.substring(front, back + 1);\n})($.input,\"/\",\"end\")}"
      },
      "type": "LAMBDA",
      "dynamicTaskNameParam": null,
      "caseValueParam": null,
      "caseExpression": null,
      "expression": null,
      "evaluatorType": null,
      "scriptExpression": null,
      "decisionCases": null,
      "dynamicForkJoinTasksParam": null,
      "dynamicForkTasksParam": null,
      "dynamicForkTasksInputParamName": null,
      "defaultCase": null,
      "forkTasks": null,
      "startDelay": 0,
      "subWorkflowParam": null,
      "joinOn": null,
      "sink": null,
      "optional": false,
      "taskDefinition": null,
      "rateLimited": false,
      "defaultExclusiveJoinTask": null,
      "asyncComplete": false,
      "loopCondition": null,
      "loopOver": null
    },
    {
      "queryExpression": null,
      "name": "LAMBDA_trim_end_multiple_chars",
      "taskReferenceName": "trim_end_multiple_chars",
      "description": "{\"description\":null}",
      "inputParameters": {
        "input": "${workflow.input.input}",
        "scriptExpression": "return {output:((function (str, chars, mode) {\n\n    if (chars == null)\n        chars = ' ';\n\n    var trimStart = true;\n    var trimEnd = true;\n\n    if (mode)\n    {\n        trimStart = mode === \"start\";\n        trimEnd = mode === \"end\";\n    }\n\n    var map = {};\n\n    if (typeof chars == 'string')\n        chars = [chars];\n\n    for (var i = 0; i < chars.length; ++i) {\n        map[chars[i]] = true;\n    }\n\n    var front = 0;\n    var back = str.length - 1;\n\n    for (var i = 0; i <= Math.floor(str.length / 2); ++i) {\n        if (trimStart && map[str[front]])\n            ++front;\n        if (trimEnd && map[str[back]])\n            --back;\n    }\n\n    if (back < front)\n        return \"\";\n    else\n        return str.substring(front, back + 1);\n})($.input,[\"/\",\".\"],\"end\")}"
      },
      "type": "LAMBDA",
      "dynamicTaskNameParam": null,
      "caseValueParam": null,
      "caseExpression": null,
      "expression": null,
      "evaluatorType": null,
      "scriptExpression": null,
      "decisionCases": null,
      "dynamicForkJoinTasksParam": null,
      "dynamicForkTasksParam": null,
      "dynamicForkTasksInputParamName": null,
      "defaultCase": null,
      "forkTasks": null,
      "startDelay": 0,
      "subWorkflowParam": null,
      "joinOn": null,
      "sink": null,
      "optional": false,
      "taskDefinition": null,
      "rateLimited": false,
      "defaultExclusiveJoinTask": null,
      "asyncComplete": false,
      "loopCondition": null,
      "loopOver": null
    },
    {
      "queryExpression": null,
      "name": "LAMBDA_trim",
      "taskReferenceName": "trim",
      "description": "{\"description\":null}",
      "inputParameters": {
        "input": "${workflow.input.input}",
        "scriptExpression": "return {output:$.input.trim()}"
      },
      "type": "LAMBDA",
      "dynamicTaskNameParam": null,
      "caseValueParam": null,
      "caseExpression": null,
      "expression": null,
      "evaluatorType": null,
      "scriptExpression": null,
      "decisionCases": null,
      "dynamicForkJoinTasksParam": null,
      "dynamicForkTasksParam": null,
      "dynamicForkTasksInputParamName": null,
      "defaultCase": null,
      "forkTasks": null,
      "startDelay": 0,
      "subWorkflowParam": null,
      "joinOn": null,
      "sink": null,
      "optional": false,
      "taskDefinition": null,
      "rateLimited": false,
      "defaultExclusiveJoinTask": null,
      "asyncComplete": false,
      "loopCondition": null,
      "loopOver": null
    },
    {
      "queryExpression": null,
      "name": "LAMBDA_trim_single_char",
      "taskReferenceName": "trim_single_char",
      "description": "{\"description\":null}",
      "inputParameters": {
        "input": "${workflow.input.input}",
        "scriptExpression": "return {output:((function (str, chars, mode) {\n\n    if (chars == null)\n        chars = ' ';\n\n    var trimStart = true;\n    var trimEnd = true;\n\n    if (mode)\n    {\n        trimStart = mode === \"start\";\n        trimEnd = mode === \"end\";\n    }\n\n    var map = {};\n\n    if (typeof chars == 'string')\n        chars = [chars];\n\n    for (var i = 0; i < chars.length; ++i) {\n        map[chars[i]] = true;\n    }\n\n    var front = 0;\n    var back = str.length - 1;\n\n    for (var i = 0; i <= Math.floor(str.length / 2); ++i) {\n        if (trimStart && map[str[front]])\n            ++front;\n        if (trimEnd && map[str[back]])\n            --back;\n    }\n\n    if (back < front)\n        return \"\";\n    else\n        return str.substring(front, back + 1);\n})($.input,\"/\")}"
      },
      "type": "LAMBDA",
      "dynamicTaskNameParam": null,
      "caseValueParam": null,
      "caseExpression": null,
      "expression": null,
      "evaluatorType": null,
      "scriptExpression": null,
      "decisionCases": null,
      "dynamicForkJoinTasksParam": null,
      "dynamicForkTasksParam": null,
      "dynamicForkTasksInputParamName": null,
      "defaultCase": null,
      "forkTasks": null,
      "startDelay": 0,
      "subWorkflowParam": null,
      "joinOn": null,
      "sink": null,
      "optional": false,
      "taskDefinition": null,
      "rateLimited": false,
      "defaultExclusiveJoinTask": null,
      "asyncComplete": false,
      "loopCondition": null,
      "loopOver": null
    },
    {
      "queryExpression": null,
      "name": "LAMBDA_trim_multiple_chars",
      "taskReferenceName": "trim_multiple_chars",
      "description": "{\"description\":null}",
      "inputParameters": {
        "input": "${workflow.input.input}",
        "scriptExpression": "return {output:((function (str, chars, mode) {\n\n    if (chars == null)\n        chars = ' ';\n\n    var trimStart = true;\n    var trimEnd = true;\n\n    if (mode)\n    {\n        trimStart = mode === \"start\";\n        trimEnd = mode === \"end\";\n    }\n\n    var map = {};\n\n    if (typeof chars == 'string')\n        chars = [chars];\n\n    for (var i = 0; i < chars.length; ++i) {\n        map[chars[i]] = true;\n    }\n\n    var front = 0;\n    var back = str.length - 1;\n\n    for (var i = 0; i <= Math.floor(str.length / 2); ++i) {\n        if (trimStart && map[str[front]])\n            ++front;\n        if (trimEnd && map[str[back]])\n            --back;\n    }\n\n    if (back < front)\n        return \"\";\n    else\n        return str.substring(front, back + 1);\n})($.input,[\"/\",\".\"])}"
      },
      "type": "LAMBDA",
      "dynamicTaskNameParam": null,
      "caseValueParam": null,
      "caseExpression": null,
      "expression": null,
      "evaluatorType": null,
      "scriptExpression": null,
      "decisionCases": null,
      "dynamicForkJoinTasksParam": null,
      "dynamicForkTasksParam": null,
      "dynamicForkTasksInputParamName": null,
      "defaultCase": null,
      "forkTasks": null,
      "startDelay": 0,
      "subWorkflowParam": null,
      "joinOn": null,
      "sink": null,
      "optional": false,
      "taskDefinition": null,
      "rateLimited": false,
      "defaultExclusiveJoinTask": null,
      "asyncComplete": false,
      "loopCondition": null,
      "loopOver": null
    },
    {
      "queryExpression": null,
      "name": "LAMBDA_substring_single_arg",
      "taskReferenceName": "substring_single_arg",
      "description": "{\"description\":null}",
      "inputParameters": {
        "input": "${workflow.input.input}",
        "scriptExpression": "return {output:$.input.substring(2)}"
      },
      "type": "LAMBDA",
      "dynamicTaskNameParam": null,
      "caseValueParam": null,
      "caseExpression": null,
      "expression": null,
      "evaluatorType": null,
      "scriptExpression": null,
      "decisionCases": null,
      "dynamicForkJoinTasksParam": null,
      "dynamicForkTasksParam": null,
      "dynamicForkTasksInputParamName": null,
      "defaultCase": null,
      "forkTasks": null,
      "startDelay": 0,
      "subWorkflowParam": null,
      "joinOn": null,
      "sink": null,
      "optional": false,
      "taskDefinition": null,
      "rateLimited": false,
      "defaultExclusiveJoinTask": null,
      "asyncComplete": false,
      "loopCondition": null,
      "loopOver": null
    },
    {
      "queryExpression": null,
      "name": "LAMBDA_trim_multiple_chars",
      "taskReferenceName": "trim_multiple_chars",
      "description": "{\"description\":null}",
      "inputParameters": {
        "input": "${workflow.input.input}",
        "scriptExpression": "return {output:$.input.substring(2,2+5)}"
      },
      "type": "LAMBDA",
      "dynamicTaskNameParam": null,
      "caseValueParam": null,
      "caseExpression": null,
      "expression": null,
      "evaluatorType": null,
      "scriptExpression": null,
      "decisionCases": null,
      "dynamicForkJoinTasksParam": null,
      "dynamicForkTasksParam": null,
      "dynamicForkTasksInputParamName": null,
      "defaultCase": null,
      "forkTasks": null,
      "startDelay": 0,
      "subWorkflowParam": null,
      "joinOn": null,
      "sink": null,
      "optional": false,
      "taskDefinition": null,
      "rateLimited": false,
      "defaultExclusiveJoinTask": null,
      "asyncComplete": false,
      "loopCondition": null,
      "loopOver": null
    }
  ],
  "inputParameters": [
    "{\"input\":{\"value\":\"\",\"description\":\" (optional)\"}}"
  ],
  "outputParameters": null,
  "failureWorkflow": null,
  "schemaVersion": 2,
  "restartable": true,
  "workflowStatusListenerEnabled": true,
  "ownerEmail": null,
  "timeoutPolicy": null,
  "timeoutSeconds": 0,
  "variables": null
}